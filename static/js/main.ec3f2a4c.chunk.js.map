{"version":3,"sources":["components/SearchBar/SearchBar.js","components/Track/Track.js","components/TrackList/TrackList.js","components/SearchResults/SearchResults.js","components/Playlist/Playlist.js","util/Spotify.js","components/App/App.js","serviceWorker.js","index.js"],"names":["SearchBar","props","state","searchInput","search","bind","searchEnter","handleSearchChange","this","onSearch","e","key","setState","target","value","className","placeholder","onChange","onKeyPress","onClick","Component","Track","isPlaying","addTrack","removeTrack","playPreview","pausePreview","isPlayingPreview","isRemoval","onAdd","trackInfo","onRemove","currentPreview","id","onPreviewToggle","name","artist","album","TrackList","tracks","map","track","SearchResults","searchResults","Playlist","handleNameChange","onNameUpdate","playlist","onSave","userAccessToken","Spotify","getAccessToken","currentUrl","window","location","href","accessToken","match","expirationTime","setTimeout","history","pushState","accessUrl","term","searchUrl","fetch","headers","response","ok","json","responseJson","items","artists","URI","uri","console","log","savePlaylist","playlistName","trackList","userId","data","JSON","stringify","method","body","playlistId","uris","getPreviewUrl","trackId","preview_url","App","playlistTracks","playingPreviewId","audioPlayer","Audio","updatePlaylistName","previewTrack","syncLists","find","savedTrack","push","trackIndex","findIndex","splice","filter","includes","action","previewUrl","src","play","alert","pause","volume","onended","Boolean","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.ec3f2a4c.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './SearchBar.css';\n\nclass SearchBar extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      searchInput: ''\n    }\n\n    this.search = this.search.bind(this);\n    this.searchEnter = this.searchEnter.bind(this);\n    this.handleSearchChange = this.handleSearchChange.bind(this);\n  }\n\n  search() {\n    this.props.onSearch(this.state.searchInput);\n  }\n\n  searchEnter(e) {\n    if (e.key === 'Enter') {\n      this.props.onSearch(this.state.searchInput);\n    }\n  }\n\n  handleSearchChange(e) {\n    this.setState({\n      searchInput: e.target.value\n    });\n  }\n\n  render() {\n    return (\n      <div className=\"SearchBar\" >\n        <input placeholder=\"Enter A Song, Album, or Artist\" onChange={this.handleSearchChange} onKeyPress={this.searchEnter} />\n        <a className=\"SearchButton\" onClick={this.search}>Search</a>\n      </div>\n    );\n  }\n}\n\nexport default SearchBar;","import React, { Component } from 'react';\nimport './Track.css';\n\nfunction renderAction(isRemoval) {\n  if (isRemoval) {\n    return '-';\n  }\n  return '+';\n\n}\n\nclass Track extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      isPlaying: true\n    };\n\n    this.addTrack = this.addTrack.bind(this);\n    this.removeTrack = this.removeTrack.bind(this);\n    this.playPreview = this.playPreview.bind(this);\n    this.pausePreview = this.pausePreview.bind(this);\n    this.isPlayingPreview = this.isPlayingPreview.bind(this);\n  }\n\n  renderAction(isRemoval) {\n    if (isRemoval) {\n      return '-';\n    }\n    return '+';\n  }\n\n  addTrack() {\n    this.props.onAdd(this.props.trackInfo);\n  }\n\n  removeTrack() {\n    this.props.onRemove(this.props.trackInfo);\n  }\n\n  isPlayingPreview() {\n    return (this.props.currentPreview === this.props.trackInfo.id) && this.state.isPlaying\n  }\n\n  playPreview() {\n    this.setState({\n      isPlaying: true\n    });\n\n    this.props.onPreviewToggle('play', this.props.trackInfo.id);\n  }\n\n  pausePreview() {\n    this.setState({\n      isPlaying: false\n    });\n    this.props.onPreviewToggle('pause');\n  }\n\n  render() {\n    return (\n      <div className=\"Track\" >\n        {!this.isPlayingPreview() && <a className=\"Track-play\" onClick={this.playPreview}></a>}\n        {this.isPlayingPreview() && <a className=\"Track-pause\" onClick={this.pausePreview}></a>}\n        <div className=\"Track-information\">\n          <h3>{this.props.trackInfo.name}</h3>\n          <p>{this.props.trackInfo.artist} | {this.props.trackInfo.album}</p>\n        </div>\n        <a className=\"Track-action\" onClick={this.props.isRemoval ? this.removeTrack : this.addTrack}>{renderAction(this.props.isRemoval)}</a>\n      </div>\n    );\n  }\n}\n\nexport default Track;","import React from 'react';\r\nimport './TrackList.css';\r\nimport Track from '../Track/Track'\r\n\r\nfunction TrackList(props) {\r\n  return (\r\n    <div className=\"TrackList\">\r\n      {\r\n        props.tracks.map(track => {\r\n          return <Track\r\n            key={track.id} \r\n            trackInfo={track}\r\n            onAdd={props.onAdd}\r\n            onRemove={props.onRemove}\r\n            isRemoval={props.isRemoval}\r\n            currentPreview={props.currentPreview}\r\n            onPreviewToggle={props.onPreviewToggle} />\r\n        })\r\n      }\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default TrackList;","import React from 'react';\nimport './SearchResults.css';\nimport TrackList from '../TrackList/TrackList';\n\nfunction SearchResults(props) {\n\n  return (\n    <div className=\"SearchResults\" >\n      <h2>Results</h2>\n      <TrackList\n        tracks={props.searchResults}\n        onAdd={props.onAdd}\n        isRemoval={false}\n        currentPreview={props.currentPreview}\n        onPreviewToggle={props.onPreviewToggle} />\n    </div>\n  );\n}\n\nexport default SearchResults;","import React, { Component } from 'react';\r\nimport './Playlist.css';\r\nimport TrackList from '../TrackList/TrackList';\r\n\r\nclass Playlist extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.handleNameChange = this.handleNameChange.bind(this);\r\n  }\r\n\r\n  handleNameChange(e) {\r\n    this.props.onNameUpdate(e.target.value);\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"Playlist\" >\r\n        <input value={this.props.name} onChange={this.handleNameChange} />\r\n        <TrackList\r\n          tracks={this.props.playlist}\r\n          isRemoval={true}\r\n          onRemove={this.props.onRemove}\r\n          currentPreview={this.props.currentPreview}\r\n          onPreviewToggle={this.props.onPreviewToggle} />\r\n        <a className=\"Playlist-save\" onClick={this.props.onSave} >SAVE TO SPOTIFY</a>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Playlist;","const clientId = '6f599e1354084ea0ad97ba63ee0fd780';\r\nconst redirectUri = 'http://localhost:3000/';\r\nlet userAccessToken = '';\r\n\r\nconst Spotify = {\r\n    getAccessToken() {\r\n        if (userAccessToken) {\r\n            return userAccessToken;\r\n        }\r\n\r\n        const currentUrl = window.location.href;\r\n        const accessToken = currentUrl.match(/access_token=([^&]*)/);\r\n        const expirationTime = currentUrl.match(/expires_in=([^&]*)/);\r\n\r\n        if (accessToken && expirationTime) {\r\n            window.setTimeout(() => accessToken[1] = '', expirationTime[1] * 1000);\r\n            window.history.pushState('Acces token', null, '/');\r\n            return accessToken[1];\r\n        }\r\n\r\n        const accessUrl = `https://accounts.spotify.com/authorize?client_id=${clientId}&response_type=token&scope=playlist-modify-public&redirect_uri=${redirectUri}`;\r\n\r\n        window.location = accessUrl;\r\n\r\n    },\r\n\r\n    async search(term) {\r\n        const searchUrl = `https://api.spotify.com/v1/search?q=${term}&type=track,artist,album`;\r\n        try {\r\n            const response = await fetch(searchUrl, {\r\n                headers: { 'Authorization': 'Bearer ' + userAccessToken }\r\n            })\r\n\r\n            if (response.ok) {\r\n                const responseJson = await response.json();\r\n\r\n\r\n                if (responseJson.tracks.items) {\r\n                    return responseJson.tracks.items.map(track => {\r\n                        return {\r\n                            id: track.id,\r\n                            name: track.name,\r\n                            artist: track.artists[0].name,\r\n                            album: track.album.name,\r\n                            URI: track.uri\r\n                        }\r\n\r\n                    })\r\n                }\r\n                return [];\r\n            }\r\n\r\n        } catch (error) { console.log(error) };\r\n    },\r\n\r\n    async savePlaylist(playlistName, trackList) {\r\n        if (!playlistName || !trackList) {\r\n            return;\r\n        }\r\n\r\n        let userId;\r\n        const headers = {\r\n            'Authorization': 'Bearer ' + userAccessToken,\r\n            'Content-Type': 'application/json'\r\n        }\r\n\r\n        try {\r\n            let response = await fetch('https://api.spotify.com/v1/me', { headers: headers });\r\n\r\n            if (response.ok) {\r\n                let responseJson = await response.json();\r\n\r\n                userId = responseJson.id;\r\n                let data = JSON.stringify({\r\n                    name: playlistName\r\n                });\r\n\r\n                response = await fetch(`https://api.spotify.com/v1/users/${userId}/playlists`, {\r\n                    method: 'POST',\r\n                    headers: headers,\r\n                    body: data\r\n                });\r\n\r\n                if (response.ok) {\r\n                    responseJson = await response.json();\r\n\r\n                    const playlistId = responseJson.id;\r\n\r\n                    data = JSON.stringify({\r\n                        uris: trackList\r\n                    });\r\n                    \r\n                    response = await fetch(`https://api.spotify.com/v1/playlists/${playlistId}/tracks`, {\r\n                        method: 'POST',\r\n                        headers: headers,\r\n                        body: data\r\n                    });\r\n                }\r\n            }\r\n        } catch (error) { console.log(error) }\r\n    },\r\n\r\n    async getPreviewUrl(trackId) {\r\n        try {\r\n            const response = await fetch(`https://api.spotify.com/v1/tracks/${trackId}`, {\r\n                headers: { 'Authorization': 'Bearer ' + userAccessToken }\r\n            } );\r\n\r\n            if (response.ok) {\r\n                const responseJson = await response.json();\r\n\r\n                return responseJson.preview_url;\r\n            }\r\n        } catch(error) {console.log(error)}\r\n    }\r\n};\r\n\r\nuserAccessToken = Spotify.getAccessToken();\r\n\r\nexport default Spotify;","import React, { Component } from 'react';\r\nimport './App.css';\r\nimport SearchBar from '../SearchBar/SearchBar';\r\nimport SearchResults from '../SearchResults/SearchResults';\r\nimport Playlist from '../Playlist/Playlist';\r\nimport Spotify from '../../util/Spotify';\r\n\r\nclass App extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      searchResults: [],\r\n      playlistName: 'New Playlist',\r\n      playlistTracks: [],\r\n      playingPreviewId: '',\r\n      audioPlayer: new Audio('')\r\n    };\r\n\r\n    this.addTrack = this.addTrack.bind(this);\r\n    this.removeTrack = this.removeTrack.bind(this);\r\n    this.updatePlaylistName = this.updatePlaylistName.bind(this);\r\n    this.savePlaylist = this.savePlaylist.bind(this);\r\n    this.search = this.search.bind(this);\r\n    this.previewTrack = this.previewTrack.bind(this);\r\n    this.syncLists = this.syncLists.bind(this);\r\n  }\r\n\r\n  addTrack(track) {\r\n    if (this.state.playlistTracks.find(savedTrack => savedTrack.id === track.id)) {\r\n      return;\r\n    }   \r\n\r\n    this.state.playlistTracks.push(track);\r\n    this.setState({ playlistTracks: this.state.playlistTracks })\r\n  }\r\n\r\n  removeTrack(track) {\r\n    const trackIndex = this.state.playlistTracks.findIndex(savedTrack => savedTrack.id === track.id);\r\n\r\n    this.state.playlistTracks.splice(trackIndex, 1);\r\n    this.setState({ playlistTracks: this.state.playlistTracks })\r\n  }\r\n\r\n  syncLists() {\r\n    return  this.state.searchResults.filter( track => !this.state.playlistTracks.includes(track))\r\n  }\r\n\r\n  updatePlaylistName(name) {\r\n    this.setState({\r\n      playlistName: name\r\n    });\r\n  }\r\n\r\n  savePlaylist() {\r\n    const trackList = this.state.playlistTracks.map(track => track.URI);\r\n    Spotify.savePlaylist(this.state.playlistName, trackList);\r\n\r\n    this.setState({\r\n      playlistName: 'New Playlist',\r\n      playlistTracks: []\r\n    });\r\n  }\r\n\r\n  async search(term) {\r\n    if (term) {\r\n      this.setState({\r\n        searchResults: await Spotify.search(term)\r\n      });\r\n    }\r\n  }\r\n\r\n  async previewTrack(action, trackId) {\r\n    if (action === 'play') {\r\n      if (trackId !== this.state.playingPreviewId) {\r\n        const previewUrl = await Spotify.getPreviewUrl(trackId);\r\n        if (previewUrl) {\r\n          this.setState({\r\n            playingPreviewId: trackId\r\n          });\r\n          this.state.audioPlayer.src = previewUrl;\r\n        } else {\r\n          this.setState({\r\n            playingPreviewId: ''\r\n          });\r\n          this.state.audioPlayer.src = '';\r\n        }\r\n      }\r\n      if ( this.state.audioPlayer.src !== window.location.href ) {\r\n        this.state.audioPlayer.play();\r\n      } else {\r\n        alert('No preview available');\r\n      }\r\n\r\n    } else {\r\n      this.state.audioPlayer.pause();\r\n    }\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.state.audioPlayer.volume = 0.3;\r\n    this.state.audioPlayer.onended = () => this.setState({ playingPreviewId: '' })\r\n\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <h1>Ja<span className=\"highlight\">mmm</span>ing</h1>\r\n        <div className=\"App\" >\r\n          <SearchBar onSearch={this.search} />\r\n          <div className=\"App-playlist\" >\r\n            <SearchResults\r\n              searchResults={this.syncLists()}\r\n              onAdd={this.addTrack}\r\n              currentPreview={this.state.playingPreviewId}\r\n              onPreviewToggle={this.previewTrack} />\r\n            <Playlist\r\n              name={this.state.playlistName}\r\n              onNameUpdate={this.updatePlaylistName}\r\n              playlist={this.state.playlistTracks}\r\n              onRemove={this.removeTrack}\r\n              onSave={this.savePlaylist}\r\n              currentPreview={this.state.playingPreviewId}\r\n              onPreviewToggle={this.previewTrack} />\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}